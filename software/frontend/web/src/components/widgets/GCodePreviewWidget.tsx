import React, { useState } from 'react';
import { FaCode, FaPlay, FaPause, FaStepForward, FaSync } from 'react-icons/fa';

interface GCodePreviewWidgetProps {
  widget: {
    id: string;
    size: { width: number; height: number };
    data?: any;
  };
}

const GCodePreviewWidget: React.FC<GCodePreviewWidgetProps> = ({ widget }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentLayer, setCurrentLayer] = useState(1);
  const [totalLayers] = useState(150);
  const [selectedLine, setSelectedLine] = useState(0);
  const isCompact = widget.size.width === 1 || widget.size.height === 1;

  const sampleGCode = [
    '; Generated by WIT Slicer',
    'G28 ; Home all axes',
    'G1 Z15.0 F6000 ; Move the platform down',
    'G92 E0 ; Reset extruder',
    'G1 F200 E3 ; Extrude 3mm',
    'G92 E0 ; Reset extruder',
    'G1 F6000 ; Set feed rate',
    '; Layer 1',
    'G1 Z0.2 F3000 ; Move to layer height',
    'G1 X10 Y10 F3000 ; Move to start position',
    'G1 E0.5 F200 ; Prime extruder'
  ];

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  if (isCompact) {
    // Compact view
    return (
      <div className="bg-gray-800 rounded-lg shadow-lg p-4 h-full flex flex-col">
        <div className="flex items-center justify-between mb-2">
          <h3 className="text-white font-medium flex items-center gap-2">
            <FaCode className="text-purple-400" />
            G-Code
          </h3>
        </div>
        <div className="flex-1 space-y-1">
          <div className="text-gray-400 text-xs">
            Layer: {currentLayer}/{totalLayers}
          </div>
          <div className="bg-gray-700 rounded h-2 overflow-hidden">
            <div
              className="bg-purple-500 h-full transition-all"
              style={{ width: `${(currentLayer / totalLayers) * 100}%` }}
            />
          </div>
        </div>
        <div className="flex gap-1 mt-2">
          <button
            onClick={handlePlayPause}
            className="flex-1 bg-purple-600 hover:bg-purple-700 text-white text-xs py-1 rounded transition-colors"
          >
            {isPlaying ? <FaPause /> : <FaPlay />}
          </button>
        </div>
      </div>
    );
  }

  // Full view
  return (
    <div className="bg-gray-800 rounded-lg shadow-lg h-full flex flex-col">
      <div className="p-4 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <h3 className="text-white font-medium flex items-center gap-2">
            <FaCode className="text-purple-400" />
            G-Code Visualizer
          </h3>
          <div className="flex gap-2">
            <button
              onClick={handlePlayPause}
              className="bg-purple-600 hover:bg-purple-700 text-white text-sm py-1 px-3 rounded transition-colors flex items-center gap-2"
            >
              {isPlaying ? <><FaPause size={12} /> Pause</> : <><FaPlay size={12} /> Play</>}
            </button>
            <button
              className="bg-gray-600 hover:bg-gray-700 text-white text-sm py-1 px-3 rounded transition-colors"
              onClick={() => setCurrentLayer(Math.min(totalLayers, currentLayer + 1))}
            >
              <FaStepForward size={12} />
            </button>
            <button
              className="bg-gray-600 hover:bg-gray-700 text-white text-sm py-1 px-3 rounded transition-colors"
              onClick={() => setCurrentLayer(1)}
            >
              <FaSync size={12} />
            </button>
          </div>
        </div>
      </div>
      
      <div className="flex-1 flex">
        {/* G-Code View */}
        <div className="w-1/2 p-4 border-r border-gray-700">
          <h4 className="text-white font-medium mb-2">G-Code</h4>
          <div className="bg-gray-900 rounded p-2 h-full overflow-auto font-mono text-xs">
            {sampleGCode.map((line, index) => (
              <div
                key={index}
                className={`py-1 px-2 cursor-pointer hover:bg-gray-800 ${
                  selectedLine === index ? 'bg-gray-700' : ''
                }`}
                onClick={() => setSelectedLine(index)}
              >
                <span className="text-gray-500 mr-3">{String(index + 1).padStart(3, '0')}</span>
                <span className={line.startsWith(';') ? 'text-green-400' : 'text-gray-300'}>
                  {line}
                </span>
              </div>
            ))}
          </div>
        </div>
        
        {/* Preview Area */}
        <div className="flex-1 p-4">
          <h4 className="text-white font-medium mb-2">Layer Preview</h4>
          <div className="bg-gray-900 rounded-lg p-4 h-full flex flex-col">
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center">
                <div className="w-48 h-48 border-2 border-purple-500 rounded-lg mb-4 flex items-center justify-center">
                  <span className="text-purple-400 text-4xl font-bold">
                    {currentLayer}
                  </span>
                </div>
                <p className="text-gray-400">Layer {currentLayer} of {totalLayers}</p>
              </div>
            </div>
            
            {/* Layer Slider */}
            <div className="mt-4">
              <input
                type="range"
                min="1"
                max={totalLayers}
                value={currentLayer}
                onChange={(e) => setCurrentLayer(Number(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-400 mt-1">
                <span>1</span>
                <span>{Math.floor(totalLayers / 2)}</span>
                <span>{totalLayers}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GCodePreviewWidget;